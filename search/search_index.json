{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"(Unofficial) Arches ORM [EXPERIMENTAL] This provides simple (server-side) access to Arches resources from Python as Python objects. It makes no guarantees about efficiency or type-accuracy but such issues raised will be addressed as far as possible. Installation Basic installation can then happen as follows, without Arches backend support: pip install . To run tests, make sure you have libsqlite3-mod-spatialite , or your distribution's equivalent package for enabling Spatialite in Python. Instead of using a real Arches PostgreSQL database, we spin a fresh test database up in memory. WARNING: The mock DB behaviour for Python testing is not identical to a real Arches database, but is adequately close for now, is fast and has no server dependency. There are several sets of optional dependencies. GraphQL Turns Arches ORM into an API server for Arches. pip install .[graphql] Arches Allows Arches ORM to directly manipulate the Arches database. Note that this is only necessary if you do not already have Arches installed in the current environment. pip install .[arches] Test Runs tests across the various backends. pip install .[tests] python -m pytest Well-known Resource Models To provide a partial boundary, this package expects a settings object called WELL_KNOWN_RESOURCE_MODELS to list, at least, the models that should be wrapped by this system. It should be a list: WELL_KNOWN_RESOURCE_MODELS = [ { \"model_name\": \"Person\", \"graphid\": \"4110f743-1a44-11e9-9a37-000d3ab1e500\", \"nodes\": {}, # optional additional configuration \"to_string\": lambda wkrm: str(wkrm) # optional callback for stringifying } ] You must not take this list as an exclusive boundary of data that can be accessed. Hooks This package also contains experimental functionality for hooking tile saves, so that client code can use the MyModel.post_save signal to get well-known resource model events. To avoid any unintended overhead, it does not load unless explicitly turned on with arches_orm.add_hooks() . Tests Note that the tests require spatialite and so a Python that allows Sqlite3 extension loading: PYTHON_CONFIGURE_OPTS=\"--enable-loadable-sqlite-extensions\" pyenv install 3.10.10 Documentation Documentation is available on https://flaxandteal.github.io/arches-orm/ . Thanks Particular thanks to the funders of this work, and to the Arches community for their work on which this builds. Particular thanks to Historic England's team for the underlying resource models used in the test-cases.","title":"Home"},{"location":"#unofficial-arches-orm-experimental","text":"This provides simple (server-side) access to Arches resources from Python as Python objects. It makes no guarantees about efficiency or type-accuracy but such issues raised will be addressed as far as possible.","title":"(Unofficial) Arches ORM [EXPERIMENTAL]"},{"location":"#installation","text":"Basic installation can then happen as follows, without Arches backend support: pip install . To run tests, make sure you have libsqlite3-mod-spatialite , or your distribution's equivalent package for enabling Spatialite in Python. Instead of using a real Arches PostgreSQL database, we spin a fresh test database up in memory. WARNING: The mock DB behaviour for Python testing is not identical to a real Arches database, but is adequately close for now, is fast and has no server dependency. There are several sets of optional dependencies.","title":"Installation"},{"location":"#graphql","text":"Turns Arches ORM into an API server for Arches. pip install .[graphql]","title":"GraphQL"},{"location":"#arches","text":"Allows Arches ORM to directly manipulate the Arches database. Note that this is only necessary if you do not already have Arches installed in the current environment. pip install .[arches]","title":"Arches"},{"location":"#test","text":"Runs tests across the various backends. pip install .[tests] python -m pytest","title":"Test"},{"location":"#well-known-resource-models","text":"To provide a partial boundary, this package expects a settings object called WELL_KNOWN_RESOURCE_MODELS to list, at least, the models that should be wrapped by this system. It should be a list: WELL_KNOWN_RESOURCE_MODELS = [ { \"model_name\": \"Person\", \"graphid\": \"4110f743-1a44-11e9-9a37-000d3ab1e500\", \"nodes\": {}, # optional additional configuration \"to_string\": lambda wkrm: str(wkrm) # optional callback for stringifying } ] You must not take this list as an exclusive boundary of data that can be accessed.","title":"Well-known Resource Models"},{"location":"#hooks","text":"This package also contains experimental functionality for hooking tile saves, so that client code can use the MyModel.post_save signal to get well-known resource model events. To avoid any unintended overhead, it does not load unless explicitly turned on with arches_orm.add_hooks() .","title":"Hooks"},{"location":"#tests","text":"Note that the tests require spatialite and so a Python that allows Sqlite3 extension loading: PYTHON_CONFIGURE_OPTS=\"--enable-loadable-sqlite-extensions\" pyenv install 3.10.10","title":"Tests"},{"location":"#documentation","text":"Documentation is available on https://flaxandteal.github.io/arches-orm/ .","title":"Documentation"},{"location":"#thanks","text":"Particular thanks to the funders of this work, and to the Arches community for their work on which this builds. Particular thanks to Historic England's team for the underlying resource models used in the test-cases.","title":"Thanks"},{"location":"docs/quickstart/","text":"Quickstart For Arches+Django This guide assumes that you have a running Arches installation in the same Python environment, with a running database and models. In this repository, run: pip install -e . If you wish to use the GraphQL auto-API, then you should also run: pip install -e .\\[graphql\\] To your settings.py , add the ORM to the end of your installed apps: INSTALLED_APPS = ( ... \"arches_orm.arches_django.apps.ArchesORMConfig\" ) Furthermore in settings.py , you should add the resource models that you wish to use via the ORM, for example (from Arches for HERs): WELL_KNOWN_RESOURCE_MODELS = [{ \"model_name\": \"Person\", \"graphid\": \"22477f01-1a44-11e9-b0a9-000d3ab1e588\" }, { \"model_name\": \"Area\", \"graphid\": \"979aaf0b-7042-11ea-9674-287fcf6a5e72\" }] As this could be a big list, you may prefer to create a TOML file to manage the graphs, for example: import tomllib ... with open(\"wkrm.toml\", \"r\") as wkrm_f: WELL_KNOWN_RESOURCE_MODELS = [model for _, model in tomllib.load(wkrm_f).items()] and then in wkrm.toml : [Person] model_name = \"Person\" graphid = \"22477f01-1a44-11e9-b0a9-000d3ab1e588\" [Area] model_name = \"Area\" graphid = \"979aaf0b-7042-11ea-9674-287fcf6a5e72\" To use this, first restart Arches and make sure you can log in as normal. Ideally, you should confirm python manage.py runserver successfully runs a local development server without erroring. You can experiment with Arches ORM by running: python manage.py shell to launch an interactive Python shell. Then the following commands should work: >>> from arches_orm.adapter import admin_everywhere >>> admin_everywhere() ARCHES ORM ADMINISTRATION MODE ON: use for debugging only, otherwise use the `context_free` or `context` decorator/with statement to achieve this result safely. >>> from arches_orm import arches_django >>> from arches_orm.models import Person Firstly, this turns on the admin mode, which means any nodegroup permissions will be ignored. When writing code in your project, you do not need this call, but should instead decorate your handler methods and functions with @context_free (or with context_free(): for small code-blocks) if any resources should load all nodegroups, or context(...) if Arches ORM should filter by a user's permissions. Secondly, by importing arches_django , we tell the ORM that it should get ready to load from the Arches database, using the arches.* Python package. You can also import static to load from JSON and a prototype for resource_api backend exists, which lets you call a remote Arches server behind the scenes instead. You can make multiple backends available simultaneously, but will have to explicitly load model classes from a given backend. Finally, we use the pseudo-module arches_orm.models to load resource models. To create a new Person, you can write: >>> p = Person.create() >>> n = p.name.append() >>> n.full_name = \"My Person\" >>> p.save() <AOR:arches-django Person b010e1ac-35a4-45e6-bdf3-a52d9fc27280> You can then go to http://localhost:8000/b010e1ac-35a4-45e6-bdf3-a52d9fc27280 in your browser to see your new Person. Remember to correct the hostname, port (and UUID) for your local setup. You can retrieve and modify your Person with, for example: >>> p = Person.find(\"b010e1ac-35a4-45e6-bdf3-a52d9fc27280\") >>> p.currency.__collection__ <Tab><Tab> p.currency.__collection__.Current p.currency.__collection__.Historic p.currency.__collection__.Former p.currency.__collection__.mro() >>> p.currency = p.currency.__collection__.Current >>> p.save()","title":"Quickstart"},{"location":"docs/quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"docs/quickstart/#for-archesdjango","text":"This guide assumes that you have a running Arches installation in the same Python environment, with a running database and models. In this repository, run: pip install -e . If you wish to use the GraphQL auto-API, then you should also run: pip install -e .\\[graphql\\] To your settings.py , add the ORM to the end of your installed apps: INSTALLED_APPS = ( ... \"arches_orm.arches_django.apps.ArchesORMConfig\" ) Furthermore in settings.py , you should add the resource models that you wish to use via the ORM, for example (from Arches for HERs): WELL_KNOWN_RESOURCE_MODELS = [{ \"model_name\": \"Person\", \"graphid\": \"22477f01-1a44-11e9-b0a9-000d3ab1e588\" }, { \"model_name\": \"Area\", \"graphid\": \"979aaf0b-7042-11ea-9674-287fcf6a5e72\" }] As this could be a big list, you may prefer to create a TOML file to manage the graphs, for example: import tomllib ... with open(\"wkrm.toml\", \"r\") as wkrm_f: WELL_KNOWN_RESOURCE_MODELS = [model for _, model in tomllib.load(wkrm_f).items()] and then in wkrm.toml : [Person] model_name = \"Person\" graphid = \"22477f01-1a44-11e9-b0a9-000d3ab1e588\" [Area] model_name = \"Area\" graphid = \"979aaf0b-7042-11ea-9674-287fcf6a5e72\" To use this, first restart Arches and make sure you can log in as normal. Ideally, you should confirm python manage.py runserver successfully runs a local development server without erroring. You can experiment with Arches ORM by running: python manage.py shell to launch an interactive Python shell. Then the following commands should work: >>> from arches_orm.adapter import admin_everywhere >>> admin_everywhere() ARCHES ORM ADMINISTRATION MODE ON: use for debugging only, otherwise use the `context_free` or `context` decorator/with statement to achieve this result safely. >>> from arches_orm import arches_django >>> from arches_orm.models import Person Firstly, this turns on the admin mode, which means any nodegroup permissions will be ignored. When writing code in your project, you do not need this call, but should instead decorate your handler methods and functions with @context_free (or with context_free(): for small code-blocks) if any resources should load all nodegroups, or context(...) if Arches ORM should filter by a user's permissions. Secondly, by importing arches_django , we tell the ORM that it should get ready to load from the Arches database, using the arches.* Python package. You can also import static to load from JSON and a prototype for resource_api backend exists, which lets you call a remote Arches server behind the scenes instead. You can make multiple backends available simultaneously, but will have to explicitly load model classes from a given backend. Finally, we use the pseudo-module arches_orm.models to load resource models. To create a new Person, you can write: >>> p = Person.create() >>> n = p.name.append() >>> n.full_name = \"My Person\" >>> p.save() <AOR:arches-django Person b010e1ac-35a4-45e6-bdf3-a52d9fc27280> You can then go to http://localhost:8000/b010e1ac-35a4-45e6-bdf3-a52d9fc27280 in your browser to see your new Person. Remember to correct the hostname, port (and UUID) for your local setup. You can retrieve and modify your Person with, for example: >>> p = Person.find(\"b010e1ac-35a4-45e6-bdf3-a52d9fc27280\") >>> p.currency.__collection__ <Tab><Tab> p.currency.__collection__.Current p.currency.__collection__.Historic p.currency.__collection__.Former p.currency.__collection__.mro() >>> p.currency = p.currency.__collection__.Current >>> p.save()","title":"For Arches+Django"},{"location":"reference/arches_orm/adapter/","text":"Module arches_orm.adapter Variables ADAPTER_MANAGER logger Functions admin def admin ( adapter_key : 'str | None' = None ) admin_everywhere def admin_everywhere ( key = None ) context def context ( ctx : 'dict | None' , adapter_key : 'str | None' = None ) -> 'Callable[[Any], Any]' context_free def context_free ( arg : 'Callable[[Any], Any] | str' ) -> 'Callable[[Any], Any]' get_adapter def get_adapter ( key = None ) Classes Adapter class Adapter ( key ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) abc.ABC Descendants arches_orm.static.adapter.StaticAdapter Instance variables key Methods context def context ( self , _ctx : 'dict[str, Any] | ContextVar | None | Literal[False]' = False , _override = False , ** kwargs : 'dict[str, Any]' ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]' context_free def context_free ( self ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]' derive_collection def derive_collection ( self , collection_id : 'str | UUID' , include : 'list[UUID] | None' , exclude : 'list[UUID] | None' , language : 'str | None' = None ) -> 'type[Enum]' Note that include and exclude should be lists of concept, not value, IDs. get_collection def get_collection ( self , collection_id : 'str | UUID' ) -> 'type[Enum]' get_context def get_context ( self ) get_rdm def get_rdm ( self ) load_from_id def load_from_id ( self , resource_id : 'str' , from_prefetch : 'Callable[[str], Any] | None' = None , lazy : 'bool' = False ) -> 'ResourceInstanceViewModel' make_concept def make_concept ( self , concept_id : 'str | UUID' , values : 'dict[UUID, tuple[str, str]]' , children : 'list[UUID] | None' ) -> 'ConceptValueViewModel' retrieve_concept def retrieve_concept ( self , concept_id : 'str | UUID' ) -> 'ConceptValueViewModel' set_context_free def set_context_free ( self ) AdapterManager class AdapterManager ( ) Class variables default_adapter Methods get_adapter def get_adapter ( self , key = None ) register_adapter def register_adapter ( self , adapter_cls , key = None ) set_default_adapter def set_default_adapter ( self , default_adapter )","title":"Adapter"},{"location":"reference/arches_orm/adapter/#module-arches_ormadapter","text":"","title":"Module arches_orm.adapter"},{"location":"reference/arches_orm/adapter/#variables","text":"ADAPTER_MANAGER logger","title":"Variables"},{"location":"reference/arches_orm/adapter/#functions","text":"","title":"Functions"},{"location":"reference/arches_orm/adapter/#admin","text":"def admin ( adapter_key : 'str | None' = None )","title":"admin"},{"location":"reference/arches_orm/adapter/#admin_everywhere","text":"def admin_everywhere ( key = None )","title":"admin_everywhere"},{"location":"reference/arches_orm/adapter/#context","text":"def context ( ctx : 'dict | None' , adapter_key : 'str | None' = None ) -> 'Callable[[Any], Any]'","title":"context"},{"location":"reference/arches_orm/adapter/#context_free","text":"def context_free ( arg : 'Callable[[Any], Any] | str' ) -> 'Callable[[Any], Any]'","title":"context_free"},{"location":"reference/arches_orm/adapter/#get_adapter","text":"def get_adapter ( key = None )","title":"get_adapter"},{"location":"reference/arches_orm/adapter/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/adapter/#adapter","text":"class Adapter ( key ) Helper class that provides a standard way to create an ABC using inheritance.","title":"Adapter"},{"location":"reference/arches_orm/adapter/#ancestors-in-mro","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/adapter/#descendants","text":"arches_orm.static.adapter.StaticAdapter","title":"Descendants"},{"location":"reference/arches_orm/adapter/#instance-variables","text":"key","title":"Instance variables"},{"location":"reference/arches_orm/adapter/#methods","text":"","title":"Methods"},{"location":"reference/arches_orm/adapter/#context_1","text":"def context ( self , _ctx : 'dict[str, Any] | ContextVar | None | Literal[False]' = False , _override = False , ** kwargs : 'dict[str, Any]' ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]'","title":"context"},{"location":"reference/arches_orm/adapter/#context_free_1","text":"def context_free ( self ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]'","title":"context_free"},{"location":"reference/arches_orm/adapter/#derive_collection","text":"def derive_collection ( self , collection_id : 'str | UUID' , include : 'list[UUID] | None' , exclude : 'list[UUID] | None' , language : 'str | None' = None ) -> 'type[Enum]' Note that include and exclude should be lists of concept, not value, IDs.","title":"derive_collection"},{"location":"reference/arches_orm/adapter/#get_collection","text":"def get_collection ( self , collection_id : 'str | UUID' ) -> 'type[Enum]'","title":"get_collection"},{"location":"reference/arches_orm/adapter/#get_context","text":"def get_context ( self )","title":"get_context"},{"location":"reference/arches_orm/adapter/#get_rdm","text":"def get_rdm ( self )","title":"get_rdm"},{"location":"reference/arches_orm/adapter/#load_from_id","text":"def load_from_id ( self , resource_id : 'str' , from_prefetch : 'Callable[[str], Any] | None' = None , lazy : 'bool' = False ) -> 'ResourceInstanceViewModel'","title":"load_from_id"},{"location":"reference/arches_orm/adapter/#make_concept","text":"def make_concept ( self , concept_id : 'str | UUID' , values : 'dict[UUID, tuple[str, str]]' , children : 'list[UUID] | None' ) -> 'ConceptValueViewModel'","title":"make_concept"},{"location":"reference/arches_orm/adapter/#retrieve_concept","text":"def retrieve_concept ( self , concept_id : 'str | UUID' ) -> 'ConceptValueViewModel'","title":"retrieve_concept"},{"location":"reference/arches_orm/adapter/#set_context_free","text":"def set_context_free ( self )","title":"set_context_free"},{"location":"reference/arches_orm/adapter/#adaptermanager","text":"class AdapterManager ( )","title":"AdapterManager"},{"location":"reference/arches_orm/adapter/#class-variables","text":"default_adapter","title":"Class variables"},{"location":"reference/arches_orm/adapter/#methods_1","text":"","title":"Methods"},{"location":"reference/arches_orm/adapter/#get_adapter_1","text":"def get_adapter ( self , key = None )","title":"get_adapter"},{"location":"reference/arches_orm/adapter/#register_adapter","text":"def register_adapter ( self , adapter_cls , key = None )","title":"register_adapter"},{"location":"reference/arches_orm/adapter/#set_default_adapter","text":"def set_default_adapter ( self , default_adapter )","title":"set_default_adapter"},{"location":"reference/arches_orm/collection/","text":"Module arches_orm.collection Functions make_collection def make_collection ( name : 'str' , collection : 'list[ConceptValueViewModel]' , identifier : 'str | None' ) -> 'type[CollectionEnum]' Classes CollectionEnum class CollectionEnum ( * args , ** kwds ) Create a collection of name/value pairs. Example enumeration: class Color(Enum): ... RED = 1 ... BLUE = 2 ... GREEN = 3 Access them by: attribute access:: Color.RED value lookup: Color(1) name lookup: Color['RED'] Enumerations can be iterated over, and know how many members they have: len(Color) 3 list(Color) [ , , ] Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details. Ancestors (in MRO) enum.Enum Class variables name value ReferenceDataManager class ReferenceDataManager ( adapter : 'Adapter' ) Methods concept_to_collection def concept_to_collection ( self , concept : 'ConceptValueViewModel' ) -> 'type[Enum]' derive_collection def derive_collection ( self , collection_id : 'str | UUID' , include : 'list[ConceptValueViewModel] | None' , exclude : 'list[ConceptValueViewModel] | None' , language : 'str | None' = None ) -> 'type[Enum]' Note that this method creates a new Enum but does not overwrite the old Collection, and the old version will still be returned from get_collection. get_collection def get_collection ( self , collection_id : 'str | UUID' ) -> 'type[Enum]' get_concept def get_concept ( self , concept_id : 'str | UUID' ) -> 'ConceptValueViewModel' make_collection def make_collection ( self , name : 'str' , collection : 'list[ConceptValueViewModel]' ) -> 'type[Enum]' make_concept def make_concept ( self , concept_id : 'str | UUID' , values : 'dict[UUID, tuple[str, str]]' , children : 'list[UUID] | list[ConceptValueViewModel] | None' = None ) -> 'ConceptValueViewModel' make_simple_concept def make_simple_concept ( self , namespace : 'str' , value : 'str | None' = None , language : 'str' = 'en' , children : 'list[UUID] | list[ConceptValueViewModel] | None' = None ) -> 'ConceptValueViewModel' Creates a concept with a consistent set of UUIDs, but depends on namespace+value being globally unique. save_concept def save_concept ( self , concept : 'ConceptValueViewModel' , output_file : 'Path | None' ) -> 'None' update_collections def update_collections ( self , concept : 'ConceptValueViewModel' , output_file : 'Path' ) -> 'None'","title":"Collection"},{"location":"reference/arches_orm/collection/#module-arches_ormcollection","text":"","title":"Module arches_orm.collection"},{"location":"reference/arches_orm/collection/#functions","text":"","title":"Functions"},{"location":"reference/arches_orm/collection/#make_collection","text":"def make_collection ( name : 'str' , collection : 'list[ConceptValueViewModel]' , identifier : 'str | None' ) -> 'type[CollectionEnum]'","title":"make_collection"},{"location":"reference/arches_orm/collection/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/collection/#collectionenum","text":"class CollectionEnum ( * args , ** kwds ) Create a collection of name/value pairs. Example enumeration: class Color(Enum): ... RED = 1 ... BLUE = 2 ... GREEN = 3 Access them by: attribute access:: Color.RED value lookup: Color(1) name lookup: Color['RED'] Enumerations can be iterated over, and know how many members they have: len(Color) 3 list(Color) [ , , ] Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details.","title":"CollectionEnum"},{"location":"reference/arches_orm/collection/#ancestors-in-mro","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/collection/#class-variables","text":"name value","title":"Class variables"},{"location":"reference/arches_orm/collection/#referencedatamanager","text":"class ReferenceDataManager ( adapter : 'Adapter' )","title":"ReferenceDataManager"},{"location":"reference/arches_orm/collection/#methods","text":"","title":"Methods"},{"location":"reference/arches_orm/collection/#concept_to_collection","text":"def concept_to_collection ( self , concept : 'ConceptValueViewModel' ) -> 'type[Enum]'","title":"concept_to_collection"},{"location":"reference/arches_orm/collection/#derive_collection","text":"def derive_collection ( self , collection_id : 'str | UUID' , include : 'list[ConceptValueViewModel] | None' , exclude : 'list[ConceptValueViewModel] | None' , language : 'str | None' = None ) -> 'type[Enum]' Note that this method creates a new Enum but does not overwrite the old Collection, and the old version will still be returned from get_collection.","title":"derive_collection"},{"location":"reference/arches_orm/collection/#get_collection","text":"def get_collection ( self , collection_id : 'str | UUID' ) -> 'type[Enum]'","title":"get_collection"},{"location":"reference/arches_orm/collection/#get_concept","text":"def get_concept ( self , concept_id : 'str | UUID' ) -> 'ConceptValueViewModel'","title":"get_concept"},{"location":"reference/arches_orm/collection/#make_collection_1","text":"def make_collection ( self , name : 'str' , collection : 'list[ConceptValueViewModel]' ) -> 'type[Enum]'","title":"make_collection"},{"location":"reference/arches_orm/collection/#make_concept","text":"def make_concept ( self , concept_id : 'str | UUID' , values : 'dict[UUID, tuple[str, str]]' , children : 'list[UUID] | list[ConceptValueViewModel] | None' = None ) -> 'ConceptValueViewModel'","title":"make_concept"},{"location":"reference/arches_orm/collection/#make_simple_concept","text":"def make_simple_concept ( self , namespace : 'str' , value : 'str | None' = None , language : 'str' = 'en' , children : 'list[UUID] | list[ConceptValueViewModel] | None' = None ) -> 'ConceptValueViewModel' Creates a concept with a consistent set of UUIDs, but depends on namespace+value being globally unique.","title":"make_simple_concept"},{"location":"reference/arches_orm/collection/#save_concept","text":"def save_concept ( self , concept : 'ConceptValueViewModel' , output_file : 'Path | None' ) -> 'None'","title":"save_concept"},{"location":"reference/arches_orm/collection/#update_collections","text":"def update_collections ( self , concept : 'ConceptValueViewModel' , output_file : 'Path' ) -> 'None'","title":"update_collections"},{"location":"reference/arches_orm/datatypes/","text":"Module arches_orm.datatypes Classes DataTypeNames class DataTypeNames ( * args , ** kwds ) Create a collection of name/value pairs. Example enumeration: class Color(Enum): ... RED = 1 ... BLUE = 2 ... GREEN = 3 Access them by: attribute access:: Color.RED value lookup: Color(1) name lookup: Color['RED'] Enumerations can be iterated over, and know how many members they have: len(Color) 3 list(Color) [ , , ] Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details. Ancestors (in MRO) enum.Enum Class variables BNGCENTREPOINT BOOLEAN CONCEPT CONCEPT_LIST DATE DJANGO_GROUP DOMAIN_VALUE DOMAIN_VALUE_LIST EDTF FILE_LIST GEOJSON_FEATURE_COLLECTION NODE_VALUE NUMBER RESOURCE_INSTANCE RESOURCE_INSTANCE_LIST SEMANTIC STRING URL USER name value","title":"Datatypes"},{"location":"reference/arches_orm/datatypes/#module-arches_ormdatatypes","text":"","title":"Module arches_orm.datatypes"},{"location":"reference/arches_orm/datatypes/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/datatypes/#datatypenames","text":"class DataTypeNames ( * args , ** kwds ) Create a collection of name/value pairs. Example enumeration: class Color(Enum): ... RED = 1 ... BLUE = 2 ... GREEN = 3 Access them by: attribute access:: Color.RED value lookup: Color(1) name lookup: Color['RED'] Enumerations can be iterated over, and know how many members they have: len(Color) 3 list(Color) [ , , ] Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details.","title":"DataTypeNames"},{"location":"reference/arches_orm/datatypes/#ancestors-in-mro","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/datatypes/#class-variables","text":"BNGCENTREPOINT BOOLEAN CONCEPT CONCEPT_LIST DATE DJANGO_GROUP DOMAIN_VALUE DOMAIN_VALUE_LIST EDTF FILE_LIST GEOJSON_FEATURE_COLLECTION NODE_VALUE NUMBER RESOURCE_INSTANCE RESOURCE_INSTANCE_LIST SEMANTIC STRING URL USER name value","title":"Class variables"},{"location":"reference/arches_orm/errors/","text":"Module arches_orm.errors Classes DescriptorsNotYetSet class DescriptorsNotYetSet ( / , * args , ** kwargs ) Common base class for all non-exit exceptions. Ancestors (in MRO) builtins.Exception builtins.BaseException Class variables args Methods add_note def add_note ( ... ) Exception.add_note(note) -- add a note to the exception with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self. WKRIPermissionDenied class WKRIPermissionDenied ( / , * args , ** kwargs ) Common base class for all non-exit exceptions. Ancestors (in MRO) builtins.Exception builtins.BaseException Class variables args Methods add_note def add_note ( ... ) Exception.add_note(note) -- add a note to the exception with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self. WKRMPermissionDenied class WKRMPermissionDenied ( / , * args , ** kwargs ) Common base class for all non-exit exceptions. Ancestors (in MRO) builtins.Exception builtins.BaseException Class variables args Methods add_note def add_note ( ... ) Exception.add_note(note) -- add a note to the exception with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"Errors"},{"location":"reference/arches_orm/errors/#module-arches_ormerrors","text":"","title":"Module arches_orm.errors"},{"location":"reference/arches_orm/errors/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/errors/#descriptorsnotyetset","text":"class DescriptorsNotYetSet ( / , * args , ** kwargs ) Common base class for all non-exit exceptions.","title":"DescriptorsNotYetSet"},{"location":"reference/arches_orm/errors/#ancestors-in-mro","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/errors/#class-variables","text":"args","title":"Class variables"},{"location":"reference/arches_orm/errors/#methods","text":"","title":"Methods"},{"location":"reference/arches_orm/errors/#add_note","text":"def add_note ( ... ) Exception.add_note(note) -- add a note to the exception","title":"add_note"},{"location":"reference/arches_orm/errors/#with_traceback","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/arches_orm/errors/#wkripermissiondenied","text":"class WKRIPermissionDenied ( / , * args , ** kwargs ) Common base class for all non-exit exceptions.","title":"WKRIPermissionDenied"},{"location":"reference/arches_orm/errors/#ancestors-in-mro_1","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/errors/#class-variables_1","text":"args","title":"Class variables"},{"location":"reference/arches_orm/errors/#methods_1","text":"","title":"Methods"},{"location":"reference/arches_orm/errors/#add_note_1","text":"def add_note ( ... ) Exception.add_note(note) -- add a note to the exception","title":"add_note"},{"location":"reference/arches_orm/errors/#with_traceback_1","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/arches_orm/errors/#wkrmpermissiondenied","text":"class WKRMPermissionDenied ( / , * args , ** kwargs ) Common base class for all non-exit exceptions.","title":"WKRMPermissionDenied"},{"location":"reference/arches_orm/errors/#ancestors-in-mro_2","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/errors/#class-variables_2","text":"args","title":"Class variables"},{"location":"reference/arches_orm/errors/#methods_2","text":"","title":"Methods"},{"location":"reference/arches_orm/errors/#add_note_2","text":"def add_note ( ... ) Exception.add_note(note) -- add a note to the exception","title":"add_note"},{"location":"reference/arches_orm/errors/#with_traceback_2","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/arches_orm/utils/","text":"Module arches_orm.utils Variables logger studly Functions camel def camel ( string , studly = False ) consistent_uuid def consistent_uuid ( string ) is_unset def is_unset ( variable , unavailable = True ) snake def snake ( class_name ) string_to_enum def string_to_enum ( string : str , full : bool = True ) -> str","title":"Utils"},{"location":"reference/arches_orm/utils/#module-arches_ormutils","text":"","title":"Module arches_orm.utils"},{"location":"reference/arches_orm/utils/#variables","text":"logger studly","title":"Variables"},{"location":"reference/arches_orm/utils/#functions","text":"","title":"Functions"},{"location":"reference/arches_orm/utils/#camel","text":"def camel ( string , studly = False )","title":"camel"},{"location":"reference/arches_orm/utils/#consistent_uuid","text":"def consistent_uuid ( string )","title":"consistent_uuid"},{"location":"reference/arches_orm/utils/#is_unset","text":"def is_unset ( variable , unavailable = True )","title":"is_unset"},{"location":"reference/arches_orm/utils/#snake","text":"def snake ( class_name )","title":"snake"},{"location":"reference/arches_orm/utils/#string_to_enum","text":"def string_to_enum ( string : str , full : bool = True ) -> str","title":"string_to_enum"},{"location":"reference/arches_orm/wkrm/","text":"Module arches_orm.wkrm Variables WELL_KNOWN_RESOURCE_MODELS logger resource_models Functions attempt_well_known_resource_model def attempt_well_known_resource_model ( resource_id , from_prefetch = None , adapter = None , lazy = False , ** kwargs ) Attempts to find and create a well-known resource from a resource ID This is the simplest entry-point if you do not know the model of the resource you have. Bear in mind, it will return None if a well-known resource model is not matched. get_resource_models_for_adapter def get_resource_models_for_adapter ( adapter_name : str | None = None ) get_well_known_resource_model_by_class_name def get_well_known_resource_model_by_class_name ( class_name , default = None , adapter : str | None = None ) Turns a class-name as a string into a well-known resource model wrapper. get_well_known_resource_model_by_graph_id def get_well_known_resource_model_by_graph_id ( graphid , default = None , adapter : str | None = None ) Turns a graph into a well-known resource model wrapper, by ID, if known. Classes WKRM class WKRM ( model_name , graphid , __str__ = None , total_remap = False , remapping = None , ** kwargs ) Well-known resource model definition. This provides the settings for a well-known resource model wrapper, in particular, the model's name, its graph ID, any node-specific settings and, if desired, a callback to render the resource to a string. Instance variables model_class_name","title":"Wkrm"},{"location":"reference/arches_orm/wkrm/#module-arches_ormwkrm","text":"","title":"Module arches_orm.wkrm"},{"location":"reference/arches_orm/wkrm/#variables","text":"WELL_KNOWN_RESOURCE_MODELS logger resource_models","title":"Variables"},{"location":"reference/arches_orm/wkrm/#functions","text":"","title":"Functions"},{"location":"reference/arches_orm/wkrm/#attempt_well_known_resource_model","text":"def attempt_well_known_resource_model ( resource_id , from_prefetch = None , adapter = None , lazy = False , ** kwargs ) Attempts to find and create a well-known resource from a resource ID This is the simplest entry-point if you do not know the model of the resource you have. Bear in mind, it will return None if a well-known resource model is not matched.","title":"attempt_well_known_resource_model"},{"location":"reference/arches_orm/wkrm/#get_resource_models_for_adapter","text":"def get_resource_models_for_adapter ( adapter_name : str | None = None )","title":"get_resource_models_for_adapter"},{"location":"reference/arches_orm/wkrm/#get_well_known_resource_model_by_class_name","text":"def get_well_known_resource_model_by_class_name ( class_name , default = None , adapter : str | None = None ) Turns a class-name as a string into a well-known resource model wrapper.","title":"get_well_known_resource_model_by_class_name"},{"location":"reference/arches_orm/wkrm/#get_well_known_resource_model_by_graph_id","text":"def get_well_known_resource_model_by_graph_id ( graphid , default = None , adapter : str | None = None ) Turns a graph into a well-known resource model wrapper, by ID, if known.","title":"get_well_known_resource_model_by_graph_id"},{"location":"reference/arches_orm/wkrm/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/wkrm/#wkrm","text":"class WKRM ( model_name , graphid , __str__ = None , total_remap = False , remapping = None , ** kwargs ) Well-known resource model definition. This provides the settings for a well-known resource model wrapper, in particular, the model's name, its graph ID, any node-specific settings and, if desired, a callback to render the resource to a string.","title":"WKRM"},{"location":"reference/arches_orm/wkrm/#instance-variables","text":"model_class_name","title":"Instance variables"},{"location":"reference/arches_orm/wrapper/","text":"Module arches_orm.wrapper Variables logger Classes ResourceWrapper class ResourceWrapper ( view_model , id = None , _new_id = None , resource = None , cross_record = None , related_prefetch = None , ** kwargs ) Superclass of all well-known resources. When you use, Person , etc. it will be this class in disguise. Ancestors (in MRO) abc.ABC Descendants arches_orm.static.wrapper.StaticResourceWrapper Class variables proxy Static methods all def all ( related_prefetch = None ) Get all resources of this type. all_ids def all_ids ( ) Get IDs for all resources of this type. build def build ( ** kwargs ) Create a new well-known resource. Makes a well-known resource but not (yet) Arches resource, from field values. create def create ( _no_save = False , _do_index = True , ** kwargs ) Create a new well-known resource and Arches resource from field values. create_bulk def create_bulk ( fields : 'list' , do_index : 'bool' = True ) find def find ( resourceinstanceid ) Find an individual well-known resource by instance ID. get_adapter def get_adapter ( ) Get the adapter that encapsulates this wrapper. search def search ( text , fields = None , _total = None ) Search for resources of this model, and return as well-known resources. to_repr_cls def to_repr_cls ( ) Convert to string. where def where ( cross_record = None , ** kwargs ) Do a filtered query returning a list of well-known resources. Instance variables resourceinstanceid Methods append def append ( self , _no_save = False ) When called via a relationship (dot), append to the relationship. delete def delete ( self ) Delete the underlying resource. describe def describe ( self ) Give a textual description of this well-known resource. get_orm_attribute def get_orm_attribute ( self , key ) Retrieve Python values for nodes attributes. get_root def get_root ( self ) Get the root value. index def index ( self ) Index the underlying resource. reload def reload ( self , ignore_prefetch = True ) Reload field values, but not node values for class. remove def remove ( self ) When called via a relationship (dot), remove the relationship. save def save ( self ) Rebuild and save the underlying resource. set_orm_attribute def set_orm_attribute ( self , key , value ) Set Python values for nodes attributes. to_repr def to_repr ( self ) Convert to string. to_string def to_string ( self ) Convert to string. update def update ( self , values : 'dict' ) Apply a dictionary of updates to fields.","title":"Wrapper"},{"location":"reference/arches_orm/wrapper/#module-arches_ormwrapper","text":"","title":"Module arches_orm.wrapper"},{"location":"reference/arches_orm/wrapper/#variables","text":"logger","title":"Variables"},{"location":"reference/arches_orm/wrapper/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/wrapper/#resourcewrapper","text":"class ResourceWrapper ( view_model , id = None , _new_id = None , resource = None , cross_record = None , related_prefetch = None , ** kwargs ) Superclass of all well-known resources. When you use, Person , etc. it will be this class in disguise.","title":"ResourceWrapper"},{"location":"reference/arches_orm/wrapper/#ancestors-in-mro","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/wrapper/#descendants","text":"arches_orm.static.wrapper.StaticResourceWrapper","title":"Descendants"},{"location":"reference/arches_orm/wrapper/#class-variables","text":"proxy","title":"Class variables"},{"location":"reference/arches_orm/wrapper/#static-methods","text":"","title":"Static methods"},{"location":"reference/arches_orm/wrapper/#all","text":"def all ( related_prefetch = None ) Get all resources of this type.","title":"all"},{"location":"reference/arches_orm/wrapper/#all_ids","text":"def all_ids ( ) Get IDs for all resources of this type.","title":"all_ids"},{"location":"reference/arches_orm/wrapper/#build","text":"def build ( ** kwargs ) Create a new well-known resource. Makes a well-known resource but not (yet) Arches resource, from field values.","title":"build"},{"location":"reference/arches_orm/wrapper/#create","text":"def create ( _no_save = False , _do_index = True , ** kwargs ) Create a new well-known resource and Arches resource from field values.","title":"create"},{"location":"reference/arches_orm/wrapper/#create_bulk","text":"def create_bulk ( fields : 'list' , do_index : 'bool' = True )","title":"create_bulk"},{"location":"reference/arches_orm/wrapper/#find","text":"def find ( resourceinstanceid ) Find an individual well-known resource by instance ID.","title":"find"},{"location":"reference/arches_orm/wrapper/#get_adapter","text":"def get_adapter ( ) Get the adapter that encapsulates this wrapper.","title":"get_adapter"},{"location":"reference/arches_orm/wrapper/#search","text":"def search ( text , fields = None , _total = None ) Search for resources of this model, and return as well-known resources.","title":"search"},{"location":"reference/arches_orm/wrapper/#to_repr_cls","text":"def to_repr_cls ( ) Convert to string.","title":"to_repr_cls"},{"location":"reference/arches_orm/wrapper/#where","text":"def where ( cross_record = None , ** kwargs ) Do a filtered query returning a list of well-known resources.","title":"where"},{"location":"reference/arches_orm/wrapper/#instance-variables","text":"resourceinstanceid","title":"Instance variables"},{"location":"reference/arches_orm/wrapper/#methods","text":"","title":"Methods"},{"location":"reference/arches_orm/wrapper/#append","text":"def append ( self , _no_save = False ) When called via a relationship (dot), append to the relationship.","title":"append"},{"location":"reference/arches_orm/wrapper/#delete","text":"def delete ( self ) Delete the underlying resource.","title":"delete"},{"location":"reference/arches_orm/wrapper/#describe","text":"def describe ( self ) Give a textual description of this well-known resource.","title":"describe"},{"location":"reference/arches_orm/wrapper/#get_orm_attribute","text":"def get_orm_attribute ( self , key ) Retrieve Python values for nodes attributes.","title":"get_orm_attribute"},{"location":"reference/arches_orm/wrapper/#get_root","text":"def get_root ( self ) Get the root value.","title":"get_root"},{"location":"reference/arches_orm/wrapper/#index","text":"def index ( self ) Index the underlying resource.","title":"index"},{"location":"reference/arches_orm/wrapper/#reload","text":"def reload ( self , ignore_prefetch = True ) Reload field values, but not node values for class.","title":"reload"},{"location":"reference/arches_orm/wrapper/#remove","text":"def remove ( self ) When called via a relationship (dot), remove the relationship.","title":"remove"},{"location":"reference/arches_orm/wrapper/#save","text":"def save ( self ) Rebuild and save the underlying resource.","title":"save"},{"location":"reference/arches_orm/wrapper/#set_orm_attribute","text":"def set_orm_attribute ( self , key , value ) Set Python values for nodes attributes.","title":"set_orm_attribute"},{"location":"reference/arches_orm/wrapper/#to_repr","text":"def to_repr ( self ) Convert to string.","title":"to_repr"},{"location":"reference/arches_orm/wrapper/#to_string","text":"def to_string ( self ) Convert to string.","title":"to_string"},{"location":"reference/arches_orm/wrapper/#update","text":"def update ( self , values : 'dict' ) Apply a dictionary of updates to fields.","title":"update"},{"location":"reference/arches_orm/static/","text":"Module arches_orm.static Sub-modules arches_orm.static.adapter arches_orm.static.wrapper Classes adapter class adapter ( key ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) arches_orm.adapter.Adapter abc.ABC Class variables key Methods context def context ( self , _ctx : 'dict[str, Any] | ContextVar | None | Literal[False]' = False , _override = False , ** kwargs : 'dict[str, Any]' ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]' context_free def context_free ( self ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]' derive_collection def derive_collection ( self , collection_id : 'str | UUID' , include : 'list[UUID] | None' , exclude : 'list[UUID] | None' , language : 'str | None' = None ) -> 'type[Enum]' Note that include and exclude should be lists of concept, not value, IDs. get_collection def get_collection ( self , collection_id : 'str | UUID' ) -> 'type[Enum]' get_context def get_context ( self ) get_rdm def get_rdm ( self ) get_wkrm_definitions def get_wkrm_definitions ( self ) get_wrapper def get_wrapper ( self ) load_from_id def load_from_id ( self , resource_id , from_prefetch = None ) make_concept def make_concept ( self , concept_id : 'str | UUID' , values : 'dict[UUID, tuple[str, str]]' , children : 'list[UUID] | None' ) -> 'ConceptValueViewModel' retrieve_concept def retrieve_concept ( self , concept_id : 'str | UUID' ) -> 'ConceptValueViewModel' save_concept def save_concept ( self , concept : 'ConceptValueViewModel' , output_file : 'Path | None' ) -> 'None' set_context_free def set_context_free ( self ) update_collections def update_collections ( self , concept : 'ConceptValueViewModel' , source_file : 'Path' ) -> 'None'","title":"Index"},{"location":"reference/arches_orm/static/#module-arches_ormstatic","text":"","title":"Module arches_orm.static"},{"location":"reference/arches_orm/static/#sub-modules","text":"arches_orm.static.adapter arches_orm.static.wrapper","title":"Sub-modules"},{"location":"reference/arches_orm/static/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/static/#adapter","text":"class adapter ( key ) Helper class that provides a standard way to create an ABC using inheritance.","title":"adapter"},{"location":"reference/arches_orm/static/#ancestors-in-mro","text":"arches_orm.adapter.Adapter abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/static/#class-variables","text":"key","title":"Class variables"},{"location":"reference/arches_orm/static/#methods","text":"","title":"Methods"},{"location":"reference/arches_orm/static/#context","text":"def context ( self , _ctx : 'dict[str, Any] | ContextVar | None | Literal[False]' = False , _override = False , ** kwargs : 'dict[str, Any]' ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]'","title":"context"},{"location":"reference/arches_orm/static/#context_free","text":"def context_free ( self ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]'","title":"context_free"},{"location":"reference/arches_orm/static/#derive_collection","text":"def derive_collection ( self , collection_id : 'str | UUID' , include : 'list[UUID] | None' , exclude : 'list[UUID] | None' , language : 'str | None' = None ) -> 'type[Enum]' Note that include and exclude should be lists of concept, not value, IDs.","title":"derive_collection"},{"location":"reference/arches_orm/static/#get_collection","text":"def get_collection ( self , collection_id : 'str | UUID' ) -> 'type[Enum]'","title":"get_collection"},{"location":"reference/arches_orm/static/#get_context","text":"def get_context ( self )","title":"get_context"},{"location":"reference/arches_orm/static/#get_rdm","text":"def get_rdm ( self )","title":"get_rdm"},{"location":"reference/arches_orm/static/#get_wkrm_definitions","text":"def get_wkrm_definitions ( self )","title":"get_wkrm_definitions"},{"location":"reference/arches_orm/static/#get_wrapper","text":"def get_wrapper ( self )","title":"get_wrapper"},{"location":"reference/arches_orm/static/#load_from_id","text":"def load_from_id ( self , resource_id , from_prefetch = None )","title":"load_from_id"},{"location":"reference/arches_orm/static/#make_concept","text":"def make_concept ( self , concept_id : 'str | UUID' , values : 'dict[UUID, tuple[str, str]]' , children : 'list[UUID] | None' ) -> 'ConceptValueViewModel'","title":"make_concept"},{"location":"reference/arches_orm/static/#retrieve_concept","text":"def retrieve_concept ( self , concept_id : 'str | UUID' ) -> 'ConceptValueViewModel'","title":"retrieve_concept"},{"location":"reference/arches_orm/static/#save_concept","text":"def save_concept ( self , concept : 'ConceptValueViewModel' , output_file : 'Path | None' ) -> 'None'","title":"save_concept"},{"location":"reference/arches_orm/static/#set_context_free","text":"def set_context_free ( self )","title":"set_context_free"},{"location":"reference/arches_orm/static/#update_collections","text":"def update_collections ( self , concept : 'ConceptValueViewModel' , source_file : 'Path' ) -> 'None'","title":"update_collections"},{"location":"reference/arches_orm/static/adapter/","text":"Module arches_orm.static.adapter Variables LOAD_ALL_NODES LOAD_FULL_NODE_OBJECTS WKRM_DEFINITIONS logger Classes StaticAdapter class StaticAdapter ( key ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) arches_orm.adapter.Adapter abc.ABC Class variables key Methods context def context ( self , _ctx : 'dict[str, Any] | ContextVar | None | Literal[False]' = False , _override = False , ** kwargs : 'dict[str, Any]' ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]' context_free def context_free ( self ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]' derive_collection def derive_collection ( self , collection_id : 'str | UUID' , include : 'list[UUID] | None' , exclude : 'list[UUID] | None' , language : 'str | None' = None ) -> 'type[Enum]' Note that include and exclude should be lists of concept, not value, IDs. get_collection def get_collection ( self , collection_id : 'str | UUID' ) -> 'type[Enum]' get_context def get_context ( self ) get_rdm def get_rdm ( self ) get_wkrm_definitions def get_wkrm_definitions ( self ) get_wrapper def get_wrapper ( self ) load_from_id def load_from_id ( self , resource_id , from_prefetch = None ) make_concept def make_concept ( self , concept_id : 'str | UUID' , values : 'dict[UUID, tuple[str, str]]' , children : 'list[UUID] | None' ) -> 'ConceptValueViewModel' retrieve_concept def retrieve_concept ( self , concept_id : 'str | UUID' ) -> 'ConceptValueViewModel' save_concept def save_concept ( self , concept : 'ConceptValueViewModel' , output_file : 'Path | None' ) -> 'None' set_context_free def set_context_free ( self ) update_collections def update_collections ( self , concept : 'ConceptValueViewModel' , source_file : 'Path' ) -> 'None'","title":"Adapter"},{"location":"reference/arches_orm/static/adapter/#module-arches_ormstaticadapter","text":"","title":"Module arches_orm.static.adapter"},{"location":"reference/arches_orm/static/adapter/#variables","text":"LOAD_ALL_NODES LOAD_FULL_NODE_OBJECTS WKRM_DEFINITIONS logger","title":"Variables"},{"location":"reference/arches_orm/static/adapter/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/static/adapter/#staticadapter","text":"class StaticAdapter ( key ) Helper class that provides a standard way to create an ABC using inheritance.","title":"StaticAdapter"},{"location":"reference/arches_orm/static/adapter/#ancestors-in-mro","text":"arches_orm.adapter.Adapter abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/static/adapter/#class-variables","text":"key","title":"Class variables"},{"location":"reference/arches_orm/static/adapter/#methods","text":"","title":"Methods"},{"location":"reference/arches_orm/static/adapter/#context","text":"def context ( self , _ctx : 'dict[str, Any] | ContextVar | None | Literal[False]' = False , _override = False , ** kwargs : 'dict[str, Any]' ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]'","title":"context"},{"location":"reference/arches_orm/static/adapter/#context_free","text":"def context_free ( self ) -> 'Generator[ContextVar[dict[str, Any] | None], None, None]'","title":"context_free"},{"location":"reference/arches_orm/static/adapter/#derive_collection","text":"def derive_collection ( self , collection_id : 'str | UUID' , include : 'list[UUID] | None' , exclude : 'list[UUID] | None' , language : 'str | None' = None ) -> 'type[Enum]' Note that include and exclude should be lists of concept, not value, IDs.","title":"derive_collection"},{"location":"reference/arches_orm/static/adapter/#get_collection","text":"def get_collection ( self , collection_id : 'str | UUID' ) -> 'type[Enum]'","title":"get_collection"},{"location":"reference/arches_orm/static/adapter/#get_context","text":"def get_context ( self )","title":"get_context"},{"location":"reference/arches_orm/static/adapter/#get_rdm","text":"def get_rdm ( self )","title":"get_rdm"},{"location":"reference/arches_orm/static/adapter/#get_wkrm_definitions","text":"def get_wkrm_definitions ( self )","title":"get_wkrm_definitions"},{"location":"reference/arches_orm/static/adapter/#get_wrapper","text":"def get_wrapper ( self )","title":"get_wrapper"},{"location":"reference/arches_orm/static/adapter/#load_from_id","text":"def load_from_id ( self , resource_id , from_prefetch = None )","title":"load_from_id"},{"location":"reference/arches_orm/static/adapter/#make_concept","text":"def make_concept ( self , concept_id : 'str | UUID' , values : 'dict[UUID, tuple[str, str]]' , children : 'list[UUID] | None' ) -> 'ConceptValueViewModel'","title":"make_concept"},{"location":"reference/arches_orm/static/adapter/#retrieve_concept","text":"def retrieve_concept ( self , concept_id : 'str | UUID' ) -> 'ConceptValueViewModel'","title":"retrieve_concept"},{"location":"reference/arches_orm/static/adapter/#save_concept","text":"def save_concept ( self , concept : 'ConceptValueViewModel' , output_file : 'Path | None' ) -> 'None'","title":"save_concept"},{"location":"reference/arches_orm/static/adapter/#set_context_free","text":"def set_context_free ( self )","title":"set_context_free"},{"location":"reference/arches_orm/static/adapter/#update_collections","text":"def update_collections ( self , concept : 'ConceptValueViewModel' , source_file : 'Path' ) -> 'None'","title":"update_collections"},{"location":"reference/arches_orm/static/wrapper/","text":"Module arches_orm.static.wrapper Variables logger Classes StaticResourceWrapper class StaticResourceWrapper ( view_model , id = None , _new_id = None , resource = None , cross_record = None , related_prefetch = None , ** kwargs ) Static wrapper for all well-known resources. When you use, Person , etc. it will be this class in disguise. Ancestors (in MRO) arches_orm.wrapper.ResourceWrapper abc.ABC Class variables proxy Static methods build def build ( ** kwargs ) Create a new well-known resource. Makes a well-known resource but not (yet) Arches resource, from field values. create def create ( _no_save = False , _do_index = True , ** kwargs ) Create a new well-known resource and Arches resource from field values. create_bulk def create_bulk ( fields : 'list' , do_index : 'bool' = True ) to_repr_cls def to_repr_cls ( ) Convert to string. Instance variables resourceinstanceid Methods all def all ( cls , related_prefetch = None ) -> list [ 'StaticResourceWrapper' ] Get all resources of this type. all_ids def all_ids ( cls ) -> list [ str ] Get IDs for all resources of this type. append def append ( self , _no_save = False ) When called via a relationship (dot), append to the relationship. delete def delete ( self ) Delete the underlying resource. describe def describe ( self ) Give a textual description of this well-known resource. find def find ( cls , resourceinstanceid ) Find an individual well-known resource by instance ID. get_adapter def get_adapter ( ) Get the adapter that encapsulates this wrapper. get_orm_attribute def get_orm_attribute ( self , key ) Retrieve Python values for nodes attributes. get_root def get_root ( self ) Get the root value. index def index ( self ) Index the underlying resource. reload def reload ( self , ignore_prefetch = True ) Reload field values, but not node values for class. remove def remove ( self ) When called via a relationship (dot), remove the relationship. save def save ( self ) Rebuild and save the underlying resource. search def search ( cls , text , fields = None , _total = None ) -> tuple [ list [ int ], int ] Search for resources of this model, and return as well-known resources. set_orm_attribute def set_orm_attribute ( self , key , value ) Set Python values for nodes attributes. to_repr def to_repr ( self ) Convert to string. to_string def to_string ( self ) Convert to string. update def update ( self , values : 'dict' ) Apply a dictionary of updates to fields. where def where ( cls , cross_record = None , ** kwargs ) Do a filtered query returning a list of well-known resources.","title":"Wrapper"},{"location":"reference/arches_orm/static/wrapper/#module-arches_ormstaticwrapper","text":"","title":"Module arches_orm.static.wrapper"},{"location":"reference/arches_orm/static/wrapper/#variables","text":"logger","title":"Variables"},{"location":"reference/arches_orm/static/wrapper/#classes","text":"","title":"Classes"},{"location":"reference/arches_orm/static/wrapper/#staticresourcewrapper","text":"class StaticResourceWrapper ( view_model , id = None , _new_id = None , resource = None , cross_record = None , related_prefetch = None , ** kwargs ) Static wrapper for all well-known resources. When you use, Person , etc. it will be this class in disguise.","title":"StaticResourceWrapper"},{"location":"reference/arches_orm/static/wrapper/#ancestors-in-mro","text":"arches_orm.wrapper.ResourceWrapper abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/arches_orm/static/wrapper/#class-variables","text":"proxy","title":"Class variables"},{"location":"reference/arches_orm/static/wrapper/#static-methods","text":"","title":"Static methods"},{"location":"reference/arches_orm/static/wrapper/#build","text":"def build ( ** kwargs ) Create a new well-known resource. Makes a well-known resource but not (yet) Arches resource, from field values.","title":"build"},{"location":"reference/arches_orm/static/wrapper/#create","text":"def create ( _no_save = False , _do_index = True , ** kwargs ) Create a new well-known resource and Arches resource from field values.","title":"create"},{"location":"reference/arches_orm/static/wrapper/#create_bulk","text":"def create_bulk ( fields : 'list' , do_index : 'bool' = True )","title":"create_bulk"},{"location":"reference/arches_orm/static/wrapper/#to_repr_cls","text":"def to_repr_cls ( ) Convert to string.","title":"to_repr_cls"},{"location":"reference/arches_orm/static/wrapper/#instance-variables","text":"resourceinstanceid","title":"Instance variables"},{"location":"reference/arches_orm/static/wrapper/#methods","text":"","title":"Methods"},{"location":"reference/arches_orm/static/wrapper/#all","text":"def all ( cls , related_prefetch = None ) -> list [ 'StaticResourceWrapper' ] Get all resources of this type.","title":"all"},{"location":"reference/arches_orm/static/wrapper/#all_ids","text":"def all_ids ( cls ) -> list [ str ] Get IDs for all resources of this type.","title":"all_ids"},{"location":"reference/arches_orm/static/wrapper/#append","text":"def append ( self , _no_save = False ) When called via a relationship (dot), append to the relationship.","title":"append"},{"location":"reference/arches_orm/static/wrapper/#delete","text":"def delete ( self ) Delete the underlying resource.","title":"delete"},{"location":"reference/arches_orm/static/wrapper/#describe","text":"def describe ( self ) Give a textual description of this well-known resource.","title":"describe"},{"location":"reference/arches_orm/static/wrapper/#find","text":"def find ( cls , resourceinstanceid ) Find an individual well-known resource by instance ID.","title":"find"},{"location":"reference/arches_orm/static/wrapper/#get_adapter","text":"def get_adapter ( ) Get the adapter that encapsulates this wrapper.","title":"get_adapter"},{"location":"reference/arches_orm/static/wrapper/#get_orm_attribute","text":"def get_orm_attribute ( self , key ) Retrieve Python values for nodes attributes.","title":"get_orm_attribute"},{"location":"reference/arches_orm/static/wrapper/#get_root","text":"def get_root ( self ) Get the root value.","title":"get_root"},{"location":"reference/arches_orm/static/wrapper/#index","text":"def index ( self ) Index the underlying resource.","title":"index"},{"location":"reference/arches_orm/static/wrapper/#reload","text":"def reload ( self , ignore_prefetch = True ) Reload field values, but not node values for class.","title":"reload"},{"location":"reference/arches_orm/static/wrapper/#remove","text":"def remove ( self ) When called via a relationship (dot), remove the relationship.","title":"remove"},{"location":"reference/arches_orm/static/wrapper/#save","text":"def save ( self ) Rebuild and save the underlying resource.","title":"save"},{"location":"reference/arches_orm/static/wrapper/#search","text":"def search ( cls , text , fields = None , _total = None ) -> tuple [ list [ int ], int ] Search for resources of this model, and return as well-known resources.","title":"search"},{"location":"reference/arches_orm/static/wrapper/#set_orm_attribute","text":"def set_orm_attribute ( self , key , value ) Set Python values for nodes attributes.","title":"set_orm_attribute"},{"location":"reference/arches_orm/static/wrapper/#to_repr","text":"def to_repr ( self ) Convert to string.","title":"to_repr"},{"location":"reference/arches_orm/static/wrapper/#to_string","text":"def to_string ( self ) Convert to string.","title":"to_string"},{"location":"reference/arches_orm/static/wrapper/#update","text":"def update ( self , values : 'dict' ) Apply a dictionary of updates to fields.","title":"update"},{"location":"reference/arches_orm/static/wrapper/#where","text":"def where ( cls , cross_record = None , ** kwargs ) Do a filtered query returning a list of well-known resources.","title":"where"}]}